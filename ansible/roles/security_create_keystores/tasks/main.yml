---
#EXPECTS: [hosts: localhost] [become: no] [connection: local] in playbook call
#uses hostvars[item].private_dns to pull the EC2 private_dns off the hosts file and push it in as the CN on each nodes cert/keystore

#- debug: msg="{{hostvars[item].private_dns}}"
#  with_items: "{{ groups['dse'] }}"

#Generate keystores for both [dse] and [opsc_dsecore] nodes

- name: For each node, generate a keystore with key pair
  command: keytool -genkeypair -keyalg RSA -alias "{{item}}" -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}" -validity "{{ssl_certs_days}}" -keysize "{{ssl_certs_key_size}}" -dname "CN={{hostvars[item].private_dns}}, OU={{ssl_cluster_name}}, O={{ssl_certs_organization}}, C={{ssl_certs_country}}"
  with_items: "{{ groups['dse']}}"
- name: For each node, generate a keystore with key pair
  command: keytool -genkeypair -keyalg RSA -alias "{{item}}" -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}" -validity "{{ssl_certs_days}}" -keysize "{{ssl_certs_key_size}}" -dname "CN={{hostvars[item].private_dns}}, OU={{ssl_cluster_name}}, O={{ssl_certs_organization}}, C={{ssl_certs_country}}"
  with_items: "{{ groups['opsc_dsecore']}}"
  
  
- name: Generate a signing request from each keystore
  command: keytool -alias "{{item}}" -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -certreq -file "{{ssl_certs_path}}/{{item}}-signing_request.csr" -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}" -dname "CN={{hostvars[item].private_dns}}, OU={{ssl_cluster_name}}, O={{ssl_certs_organization}}, C={{ssl_certs_country}}"
  with_items: "{{ groups['dse']}}"
- name: Generate a signing request from each keystore
  command: keytool -alias "{{item}}" -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -certreq -file "{{ssl_certs_path}}/{{item}}-signing_request.csr" -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}" -dname "CN={{hostvars[item].private_dns}}, OU={{ssl_cluster_name}}, O={{ssl_certs_organization}}, C={{ssl_certs_country}}"
  with_items: "{{ groups['opsc_dsecore']}}"
  
  
- name: BYO sign each nodes certificate
  command: openssl x509 -req -CA "{{ssl_certs_path}}/{{ssl_certs_common_name}}.pem" -CAkey "{{ssl_certs_path}}/{{ssl_certs_common_name}}.key" -in "{{ssl_certs_path}}/{{item}}-signing_request.csr" -out "{{ssl_certs_path}}/{{item}}.crt_signed" -days "{{ssl_certs_days}}" -CAcreateserial -passin pass:"{{cluster_keystore_password}}"
  with_items: "{{ groups['dse']}}"
- name: BYO sign each nodes certificate
  command: openssl x509 -req -CA "{{ssl_certs_path}}/{{ssl_certs_common_name}}.pem" -CAkey "{{ssl_certs_path}}/{{ssl_certs_common_name}}.key" -in "{{ssl_certs_path}}/{{item}}-signing_request.csr" -out "{{ssl_certs_path}}/{{item}}.crt_signed" -days "{{ssl_certs_days}}" -CAcreateserial -passin pass:"{{cluster_keystore_password}}"
  with_items: "{{ groups['opsc_dsecore']}}"
  
- name: Import the root certificate into each node's keystore
  command: keytool -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -alias "{{ssl_certs_common_name}}" -importcert -file "{{ssl_certs_path}}/{{ssl_certs_common_name}}.pem" -noprompt  -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
  with_items: "{{ groups['dse']}}"
- name: Import the root certificate into each node's keystore
  command: keytool -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -alias "{{ssl_certs_common_name}}" -importcert -file "{{ssl_certs_path}}/{{ssl_certs_common_name}}.pem" -noprompt  -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
  with_items: "{{ groups['opsc_dsecore']}}"
  
- name: Import the node's signed certificate into corresponding keystore
  command: keytool -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -alias "{{item}}" -importcert -noprompt -file "{{ssl_certs_path}}/{{item}}.crt_signed" -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
  with_items: "{{ groups['dse']}}"
- name: Import the node's signed certificate into corresponding keystore
  command: keytool -keystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -alias "{{item}}" -importcert -noprompt -file "{{ssl_certs_path}}/{{item}}.crt_signed" -storepass "{{cluster_keystore_password}}" -keypass "{{cluster_keystore_password}}"
  with_items: "{{ groups['opsc_dsecore']}}"
  
#- name: Convert all the keystores into pkcs12 keystores
#  command: keytool -importkeystore -srckeystore "{{ssl_certs_path}}/{{item}}-keystore.jks" -destkeystore "{{ssl_certs_path}}/{{item}}-pkcs12-keystore.jks" -deststoretype pkcs12 -storepass "{{cluster_keystore_password}}" -deststorepass "{{cluster_keystore_password}}"
#  with_items: "{{ groups['dse'] }}"
